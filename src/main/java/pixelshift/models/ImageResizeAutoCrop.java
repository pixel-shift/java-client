/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package pixelshift.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Resize image with touch-from-outside semantics with automatic positioning of
 * crop area using two different
 * strategies.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("Image_ResizeAutoCrop")
public class ImageResizeAutoCrop extends TransformUnit {
    /**
     * Output width.
     */
    @JsonProperty(value = "width", required = true)
    private int width;

    /**
     * Output height.
     */
    @JsonProperty(value = "height", required = true)
    private int height;

    /**
     * Strategy used for positioning crop area. Possible values include:
     * 'attention', 'entropy'.
     */
    @JsonProperty(value = "strategy")
    private Strategy strategy;

    /**
     * The resampling algorithm used for resizing. Possible values include:
     * 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     */
    @JsonProperty(value = "resizeKernel")
    private ResizeKernel resizeKernel;

    /**
     * Get output width.
     *
     * @return the width value
     */
    public int width() {
        return this.width;
    }

    /**
     * Set output width.
     *
     * @param width the width value to set
     * @return the ImageResizeAutoCrop object itself.
     */
    public ImageResizeAutoCrop withWidth(int width) {
        this.width = width;
        return this;
    }

    /**
     * Get output height.
     *
     * @return the height value
     */
    public int height() {
        return this.height;
    }

    /**
     * Set output height.
     *
     * @param height the height value to set
     * @return the ImageResizeAutoCrop object itself.
     */
    public ImageResizeAutoCrop withHeight(int height) {
        this.height = height;
        return this;
    }

    /**
     * Get strategy used for positioning crop area. Possible values include: 'attention', 'entropy'.
     *
     * @return the strategy value
     */
    public Strategy strategy() {
        return this.strategy;
    }

    /**
     * Set strategy used for positioning crop area. Possible values include: 'attention', 'entropy'.
     *
     * @param strategy the strategy value to set
     * @return the ImageResizeAutoCrop object itself.
     */
    public ImageResizeAutoCrop withStrategy(Strategy strategy) {
        this.strategy = strategy;
        return this;
    }

    /**
     * Get the resampling algorithm used for resizing. Possible values include: 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     *
     * @return the resizeKernel value
     */
    public ResizeKernel resizeKernel() {
        return this.resizeKernel;
    }

    /**
     * Set the resampling algorithm used for resizing. Possible values include: 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     *
     * @param resizeKernel the resizeKernel value to set
     * @return the ImageResizeAutoCrop object itself.
     */
    public ImageResizeAutoCrop withResizeKernel(ResizeKernel resizeKernel) {
        this.resizeKernel = resizeKernel;
        return this;
    }

}
