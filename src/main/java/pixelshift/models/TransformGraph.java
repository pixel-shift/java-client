/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package pixelshift.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A description of steps for processing images from source to destination. Can
 * be branched by using the "outputs"
 * property to allow for multiple transformations on a single source image.
 */
public class TransformGraph {
    /**
     * A list of transforms that run one after another, piping content from one
     * transform to the next.
     */
    @JsonProperty(value = "transforms", required = true)
    private List<TransformUnit> transforms;

    /**
     * A list of output transform graphs, each one receiving the output of the
     * last transform in the "transforms"
     * collection.
     */
    @JsonProperty(value = "outputs")
    private List<TransformGraph> outputs;

    /**
     * Get a list of transforms that run one after another, piping content from one transform to the next.
     *
     * @return the transforms value
     */
    public List<TransformUnit> transforms() {
        return this.transforms;
    }

    /**
     * Set a list of transforms that run one after another, piping content from one transform to the next.
     *
     * @param transforms the transforms value to set
     * @return the TransformGraph object itself.
     */
    public TransformGraph withTransforms(List<TransformUnit> transforms) {
        this.transforms = transforms;
        return this;
    }

    /**
     * Get a list of output transform graphs, each one receiving the output of the last transform in the "transforms"
     collection.
     *
     * @return the outputs value
     */
    public List<TransformGraph> outputs() {
        return this.outputs;
    }

    /**
     * Set a list of output transform graphs, each one receiving the output of the last transform in the "transforms"
     collection.
     *
     * @param outputs the outputs value to set
     * @return the TransformGraph object itself.
     */
    public TransformGraph withOutputs(List<TransformGraph> outputs) {
        this.outputs = outputs;
        return this;
    }

}
