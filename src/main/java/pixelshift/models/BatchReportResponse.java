/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package pixelshift.models;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * A summary of batch compute time and pending, failed and completed
 * operations.
 */
public class BatchReportResponse {
    /**
     * the total amount of CPU time spent on this batch. if there are pending
     * operations,
     * then this figure is not final.
     */
    @JsonProperty(value = "aggregateComputeTime")
    private Double aggregateComputeTime;

    /**
     * True if all operations in batch have been processed. Possible values
     * include: 'pending', 'finished'.
     */
    @JsonProperty(value = "status")
    private BatchStatus status;

    /**
     * when the batch was submitted.
     */
    @JsonProperty(value = "created")
    private DateTime created;

    /**
     * list of id/summary endpoint for operations that are still pending.
     */
    @JsonProperty(value = "pending")
    private List<OperationInfoResponse> pending;

    /**
     * list of id/summary endpoint for operations that are completed.
     */
    @JsonProperty(value = "completed")
    private List<OperationInfoResponse> completed;

    /**
     * list of id/summary endpoint for operations that have failed.
     */
    @JsonProperty(value = "failed")
    private List<OperationInfoResponse> failed;

    /**
     * Get the total amount of CPU time spent on this batch. if there are pending operations,
     then this figure is not final.
     *
     * @return the aggregateComputeTime value
     */
    public Double aggregateComputeTime() {
        return this.aggregateComputeTime;
    }

    /**
     * Set the total amount of CPU time spent on this batch. if there are pending operations,
     then this figure is not final.
     *
     * @param aggregateComputeTime the aggregateComputeTime value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withAggregateComputeTime(Double aggregateComputeTime) {
        this.aggregateComputeTime = aggregateComputeTime;
        return this;
    }

    /**
     * Get true if all operations in batch have been processed. Possible values include: 'pending', 'finished'.
     *
     * @return the status value
     */
    public BatchStatus status() {
        return this.status;
    }

    /**
     * Set true if all operations in batch have been processed. Possible values include: 'pending', 'finished'.
     *
     * @param status the status value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withStatus(BatchStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get when the batch was submitted.
     *
     * @return the created value
     */
    public DateTime created() {
        return this.created;
    }

    /**
     * Set when the batch was submitted.
     *
     * @param created the created value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withCreated(DateTime created) {
        this.created = created;
        return this;
    }

    /**
     * Get list of id/summary endpoint for operations that are still pending.
     *
     * @return the pending value
     */
    public List<OperationInfoResponse> pending() {
        return this.pending;
    }

    /**
     * Set list of id/summary endpoint for operations that are still pending.
     *
     * @param pending the pending value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withPending(List<OperationInfoResponse> pending) {
        this.pending = pending;
        return this;
    }

    /**
     * Get list of id/summary endpoint for operations that are completed.
     *
     * @return the completed value
     */
    public List<OperationInfoResponse> completed() {
        return this.completed;
    }

    /**
     * Set list of id/summary endpoint for operations that are completed.
     *
     * @param completed the completed value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withCompleted(List<OperationInfoResponse> completed) {
        this.completed = completed;
        return this;
    }

    /**
     * Get list of id/summary endpoint for operations that have failed.
     *
     * @return the failed value
     */
    public List<OperationInfoResponse> failed() {
        return this.failed;
    }

    /**
     * Set list of id/summary endpoint for operations that have failed.
     *
     * @param failed the failed value to set
     * @return the BatchReportResponse object itself.
     */
    public BatchReportResponse withFailed(List<OperationInfoResponse> failed) {
        this.failed = failed;
        return this;
    }

}
