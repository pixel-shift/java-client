/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package pixelshift.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Resize image with touch-from-outside semantics with manual positioning of
 * crop area via the gravity parameter.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("Image_ResizeCrop")
public class ImageResizeCrop extends TransformUnit {
    /**
     * Output width.
     */
    @JsonProperty(value = "width", required = true)
    private int width;

    /**
     * Output height.
     */
    @JsonProperty(value = "height", required = true)
    private int height;

    /**
     * Position of crop area by gravity. Possible values include: 'center',
     * 'centre', 'north', 'northeast', 'east', 'southeast', 'south',
     * 'southwest', 'west', 'northwest'.
     */
    @JsonProperty(value = "gravity")
    private Gravity gravity;

    /**
     * The resampling algorithm used for resizing. Possible values include:
     * 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     */
    @JsonProperty(value = "resizeKernel")
    private ResizeKernel resizeKernel;

    /**
     * Get output width.
     *
     * @return the width value
     */
    public int width() {
        return this.width;
    }

    /**
     * Set output width.
     *
     * @param width the width value to set
     * @return the ImageResizeCrop object itself.
     */
    public ImageResizeCrop withWidth(int width) {
        this.width = width;
        return this;
    }

    /**
     * Get output height.
     *
     * @return the height value
     */
    public int height() {
        return this.height;
    }

    /**
     * Set output height.
     *
     * @param height the height value to set
     * @return the ImageResizeCrop object itself.
     */
    public ImageResizeCrop withHeight(int height) {
        this.height = height;
        return this;
    }

    /**
     * Get position of crop area by gravity. Possible values include: 'center', 'centre', 'north', 'northeast', 'east', 'southeast', 'south', 'southwest', 'west', 'northwest'.
     *
     * @return the gravity value
     */
    public Gravity gravity() {
        return this.gravity;
    }

    /**
     * Set position of crop area by gravity. Possible values include: 'center', 'centre', 'north', 'northeast', 'east', 'southeast', 'south', 'southwest', 'west', 'northwest'.
     *
     * @param gravity the gravity value to set
     * @return the ImageResizeCrop object itself.
     */
    public ImageResizeCrop withGravity(Gravity gravity) {
        this.gravity = gravity;
        return this;
    }

    /**
     * Get the resampling algorithm used for resizing. Possible values include: 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     *
     * @return the resizeKernel value
     */
    public ResizeKernel resizeKernel() {
        return this.resizeKernel;
    }

    /**
     * Set the resampling algorithm used for resizing. Possible values include: 'lanczos3', 'lanczos2', 'cubic', 'nearest'.
     *
     * @param resizeKernel the resizeKernel value to set
     * @return the ImageResizeCrop object itself.
     */
    public ImageResizeCrop withResizeKernel(ResizeKernel resizeKernel) {
        this.resizeKernel = resizeKernel;
        return this;
    }

}
