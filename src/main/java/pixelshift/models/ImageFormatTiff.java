/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package pixelshift.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Output to Tiff.
 */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "kind")
@JsonTypeName("ImageFormat_Tiff")
public class ImageFormatTiff extends TransformUnit {
    /**
     * Tiff compression level.
     */
    @JsonProperty(value = "quality")
    private Integer quality;

    /**
     * Type of compression used in Tiff output. Possible values include:
     * 'jpeg', 'deflate', 'lzw', 'ccittfax4'.
     */
    @JsonProperty(value = "compression")
    private TiffCompression compression;

    /**
     * Tiff compression predictor. Possible values include: 'horizontal',
     * 'float', 'none'.
     */
    @JsonProperty(value = "predictor")
    private TiffPredictor predictor;

    /**
     * Get tiff compression level.
     *
     * @return the quality value
     */
    public Integer quality() {
        return this.quality;
    }

    /**
     * Set tiff compression level.
     *
     * @param quality the quality value to set
     * @return the ImageFormatTiff object itself.
     */
    public ImageFormatTiff withQuality(Integer quality) {
        this.quality = quality;
        return this;
    }

    /**
     * Get type of compression used in Tiff output. Possible values include: 'jpeg', 'deflate', 'lzw', 'ccittfax4'.
     *
     * @return the compression value
     */
    public TiffCompression compression() {
        return this.compression;
    }

    /**
     * Set type of compression used in Tiff output. Possible values include: 'jpeg', 'deflate', 'lzw', 'ccittfax4'.
     *
     * @param compression the compression value to set
     * @return the ImageFormatTiff object itself.
     */
    public ImageFormatTiff withCompression(TiffCompression compression) {
        this.compression = compression;
        return this;
    }

    /**
     * Get tiff compression predictor. Possible values include: 'horizontal', 'float', 'none'.
     *
     * @return the predictor value
     */
    public TiffPredictor predictor() {
        return this.predictor;
    }

    /**
     * Set tiff compression predictor. Possible values include: 'horizontal', 'float', 'none'.
     *
     * @param predictor the predictor value to set
     * @return the ImageFormatTiff object itself.
     */
    public ImageFormatTiff withPredictor(TiffPredictor predictor) {
        this.predictor = predictor;
        return this;
    }

}
